     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, printf, scanf, fscanf, fopen, fclose, fclose
     5                                  
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import printf msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fscanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  
    14                                  segment data use32 class=data
    15 00000000 6165696F754145494F-         vocale db "aeiouAEIOU", 0
    15 00000009 5500               
    16 0000000B 456E7465722066696C-         message_for_file_name db "Enter file name: ", 0
    16 00000014 65206E616D653A2000 
    17 0000001D <res 00000064>              file_name resb 100
    18 00000081 257300                      string_format db "%s", 0
    19 00000084 256400                      decimal_format db "%d", 0
    20 00000087 25732C20256400              format db "%s, %d", 0  
    21 0000008E <res 00000004>              file_descriptor resd 1
    22 00000092 7200                        read_acces_mode db "r", 0
    23 00000094 <res 00000064>              my_word resb 100
    24 000000F8 00000000                    number dd 0
    25 000000FC <res 00000064>              word_to_be_printed resb 100
    26                                  
    27                                  segment code use32 class=code
    28                                  read_file_name:
    29 00000000 68[0B000000]                push message_for_file_name
    30 00000005 FF15[00000000]              call [printf]
    31 0000000B 83C404                      add esp, 4 * 1
    32                                  
    33 0000000E 68[1D000000]                push file_name
    34 00000013 68[81000000]                push string_format
    35 00000018 FF15[00000000]              call [scanf]
    36 0000001E 83C408                      add esp, 4 * 2
    37                                  
    38 00000021 C3                          ret
    39                                  
    40                                  open_file:
    41 00000022 68[92000000]                push read_acces_mode
    42 00000027 68[1D000000]                push file_name
    43 0000002C FF15[00000000]              call [fopen]
    44 00000032 A3[8E000000]                mov dword[file_descriptor], EAX
    45 00000037 83C408                      add esp, 4 * 2
    46                                  
    47 0000003A C3                          ret
    48                                  
    49                                  read_from_file:
    50 0000003B 68[94000000]                push my_word
    51 00000040 68[81000000]                push string_format
    52 00000045 FF35[8E000000]              push dword[file_descriptor]
    53 0000004B FF15[00000000]              call [fscanf]
    54 00000051 83C40C                      add esp, 4 * 3
    55                                  
    56 00000054 68[F8000000]                push number
    57 00000059 68[84000000]                push decimal_format
    58 0000005E FF35[8E000000]              push dword[file_descriptor]
    59 00000064 FF15[00000000]              call [fscanf]
    60 0000006A 83C40C                      add esp, 4 * 3
    61                                  
    62 0000006D C3                          ret
    63                                  print_word:
    64 0000006E 68[94000000]                push my_word
    65 00000073 68[81000000]                push string_format
    66 00000078 FF15[00000000]              call [printf]
    67 0000007E 83C408                      add esp, 4 * 2
    68 00000081 C3                          ret
    69                                  is_vowel:
    70 00000082 BB[00000000]                mov EBX, vocale
    71 00000087 B800000000                  mov EAX, 0
    72 0000008C 8A442404                    mov AL, byte[ESP + 4];comparam cu caracterul din AL
    73                                  
    74                                      While:
    75 00000090 B900000000                      mov ecx, 0
    76 00000095 8A0B                            mov cl, byte [EBX]
    77 00000097 39C1                            cmp ecx, eax
    78 00000099 7408                            jz e_vocala
    79                                  
    80                                          
    81 0000009B 43                              inc EBX
    82 0000009C 803B00                          cmp byte [EBX], 0
    83 0000009F 75EF                        jne While
    84                                  
    85 000000A1 EB04                        jmp nu_e_vocala
    86                                      e_vocala:
    87 000000A3 B001                            mov AL, 1
    88 000000A5 EB02                            jmp bag_pulan_masa
    89                                      nu_e_vocala:
    90 000000A7 B000                            mov AL, 0
    91                                      bag_pulan_masa:
    92                                  
    93 000000A9 C3                          ret
    94                                  print_final_word:
    95 000000AA 68[FC000000]                push word_to_be_printed
    96 000000AF 68[81000000]                push string_format
    97 000000B4 FF15[00000000]              call [printf]
    98 000000BA 83C408                      add esp, 4 * 2
    99 000000BD C3                          ret
   100                                  start:
   101 000000BE E83DFFFFFF                  call read_file_name
   102 000000C3 E85AFFFFFF                  call open_file
   103 000000C8 E86EFFFFFF                  call read_from_file
   104                                  
   105 000000CD A1[F8000000]                mov EAX, dword[number]
   106                                  
   107 000000D2 66BB0200                    MOV BX, 2
   108 000000D6 66F7F3                      DIV BX
   109                                  
   110 000000D9 6683FA01                    CMP DX, 1
   111 000000DD 7415                        je is_odd
   112 000000DF BE[94000000]                    mov ESI, my_word
   113                                  
   114                                          my_loop:
   115 000000E4 800614                              ADD byte[ESI], 20
   116 000000E7 46                                  INC ESI
   117 000000E8 803E00                              cmp byte[ESI], 0
   118 000000EB 75F7                            jne my_loop
   119                                  
   120 000000ED E87CFFFFFF                  call print_word
   121                                  
   122 000000F2 EB34                        jmp final
   123                                      is_odd:
   124                                          ;here we make the pasareasca
   125 000000F4 BE[94000000]                    MOV ESI, my_word
   126 000000F9 BF[FC000000]                    mov EDI, word_to_be_printed
   127                                  
   128                                           my_loop2:
   129 000000FE B900000000                          MOV ECX, 0
   130 00000103 8A0E                                mov CL, byte[ESI];we have in ECX the character
   131 00000105 51                                  push ECX
   132 00000106 E877FFFFFF                          call is_vowel; AL e 1 daca e vocala
   133                                              
   134 0000010B 8A1E                                MOV BL, BYTE[ESI]
   135 0000010D 881F                                mov byte[EDI], BL
   136 0000010F 47                                  INC EDI
   137 00000110 3C00                                CMP AL, 0
   138                                  
   139 00000112 7409                                JZ nu_adaug_nimic
   140 00000114 C60770                                  mov byte[EDI], 'p'
   141 00000117 885F01                                  MOV BYTE[EDI + 1], BL
   142 0000011A 83C702                                  ADD EDI, 2
   143                                              nu_adaug_nimic:
   144                                  
   145                                          
   146 0000011D 46                                  inc ESI
   147 0000011E 803E00                              cmp byte[ESI], 0
   148 00000121 75DB                            jne my_loop2
   149                                  
   150 00000123 E882FFFFFF                      call print_final_word
   151                                      final:
   152                                  
   153 00000128 6A00                    	push dword 0 
   154 0000012A FF15[00000000]          	call [exit] 
