     1                                  bits 32
     2                                  global write_in_file
     3                                  
     4                                  extern fopen, fprintf, fclose
     5                                  
     6                                  
     7                                  import fclose msvcrt.dll
     8                                  import fprintf msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  
    11                                  segment data use32 class=data
    12 00000000 433A5C55736572735C-         filePath db "C:\Users\Bob\Documents\FMI - YEAR 1\assembly\Lab Work\A9\max.txt", 0
    12 00000009 426F625C446F63756D-
    12 00000012 656E74735C464D4920-
    12 0000001B 2D205945415220315C-
    12 00000024 617373656D626C795C-
    12 0000002D 4C616220576F726B5C-
    12 00000036 41395C6D61782E7478-
    12 0000003F 7400               
    13 00000041 7200                        operation db "r", 0
    14 00000043 <res 00000004>              file_descriptor resd 1
    15 00000047 <res 00000004>              ret_file resd 1
    16 0000004B 00000000                    value_to_be_printed dd 0
    17 0000004F 256400                      testt db "%d", 0
    18 00000052 4261672070756C6121-         mesaj db "Bag pula!", 0
    18 0000005B 00                 
    19                                  
    20                                  write_in_file:
    21 0000005C 8F05[47000000]              pop dword [ret_file]
    22 00000062 8F05[4B000000]              pop dword [value_to_be_printed]
    23                                  
    24                                      ;----------here we open the file ------------------------------
    25 00000068 68[41000000]                push dword operation
    26 0000006D 68[00000000]                push dword filePath
    27 00000072 FF15[00000000]              call [fopen];we open test.txt
    28 00000078 A3[43000000]                mov [file_descriptor], EAX; we move the file descriptor from EAX
    29 0000007D 83C40C                      add ESP, 4 * 3
    30                                      ;----------------------------------------------------------------
    31                                  
    32 00000080 83F800                      CMP EAX, 0
    33 00000083 EB23                        JMP error1;If EAX is 0 the file is not successfully open
    34                                  
    35                                      ;-------------Here we print the value---------------------------
    36 00000085 FF35[4B000000]              push dword[value_to_be_printed]
    37 0000008B FF35[43000000]              push dword [file_descriptor]
    38 00000091 FF15[00000000]              call [fprintf]
    39 00000097 83C408                      ADD ESP, 4 * 2;We empty the stack
    40                                      ;---------------------------------------------------------------
    41                                  
    42                                  
    43                                      ;-------------Here we close the file---------------------------
    44 0000009A 68[52000000]                push mesaj
    45 0000009F FF15[00000000]              call [fclose]
    46 000000A5 83C404                      ADD ESP, 4 * 1
    47                                      ;--------------------------------------------------------------
    48                                  
    49                                      error1:
    50                                  
    51 000000A8 FF35[47000000]          	push dword [ret_file];we need ret to function
    52 000000AE C3                      	ret
