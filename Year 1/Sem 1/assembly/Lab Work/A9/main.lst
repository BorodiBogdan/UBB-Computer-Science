     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, fopen, scanf, fclose, printf
     5                                  
     6                                  import exit msvcrt.dll
     7                                  import fopen msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  
    12                                  segment data use32 class=data
    13 00000000 433A5C55736572735C-         filePath db "C:\Users\Bob\Documents\FMI - YEAR 1\assembly\Lab Work\A9\max.txt", 0
    13 00000009 426F625C446F63756D-
    13 00000012 656E74735C464D4920-
    13 0000001B 2D205945415220315C-
    13 00000024 617373656D626C795C-
    13 0000002D 4C616220576F726B5C-
    13 00000036 41395C6D61782E7478-
    13 0000003F 7400               
    14 00000041 7200                        operation db "r", 0
    15 00000043 <res 00000004>              file_descriptor resd 1
    16 00000047 456E74657220746865-         input_message db "Enter the number of integers from the string: ", 0
    16 00000050 206E756D626572206F-
    16 00000059 6620696E7465676572-
    16 00000062 732066726F6D207468-
    16 0000006B 6520737472696E673A-
    16 00000074 2000               
    17 00000076 256400                      format db "%d", 0
    18 00000079 00000000                    number_of_integers dd 0
    19 0000007D 00000000                    max_value dd 0
    20 00000081 00000000                    integer dd 0
    21                                  
    22                                  segment code use32 class=code
    23                                  start:
    24 00000000 FC                          cld
    25                                  
    26                                      ;----------here we open the file ------------------------------
    27 00000001 68[41000000]                push dword operation
    28 00000006 68[00000000]                push dword filePath
    29 0000000B FF15[00000000]              call [fopen];we open test.txt
    30 00000011 A3[43000000]                mov [file_descriptor], EAX; we move the file descriptor from EAX
    31 00000016 83C40C                      add ESP, 4 * 3
    32                                      ;----------------------------------------------------------------
    33                                  
    34                                      ;-----------Here we read the number of integers------------------
    35 00000019 68[47000000]                push input_message
    36 0000001E FF15[00000000]              call [printf]
    37 00000024 83C404                      add ESP, 4 * 1; We empty the stack
    38                                  
    39 00000027 68[79000000]                push number_of_integers
    40 0000002C 68[76000000]                push format
    41 00000031 FF15[00000000]              call [scanf]
    42 00000037 83C408                      add ESP, 4 * 2;We empty the stack
    43                                  
    44 0000003A 8B0D[79000000]              mov ECX, [number_of_integers];we read n numbers
    45                                      ;-----------------------------------------------------------------
    46                                  
    47                                      
    48                                      my_loop:
    49 00000040 A1[79000000]                    MOV EAX, [number_of_integers]
    50 00000045 83F800                          CMP EAX, 0
    51 00000048 742D                            jz final
    52 0000004A 48                              DEC EAX
    53 0000004B A3[79000000]                    mov [number_of_integers], EAX
    54                                          
    55                                          
    56                                          ;-------we read the integer--------
    57 00000050 68[81000000]                    push integer
    58 00000055 68[76000000]                    push format
    59 0000005A FF15[00000000]                  call [scanf]
    60 00000060 83C408                          add ESP, 4 * 2;We empty the stack
    61                                          ;--------------------------------
    62                                  
    63                                          ;--------we find the max value----------
    64 00000063 A1[81000000]                    MOV EAX, [integer]
    65 00000068 3B05[7D000000]                  CMP EAX, [max_value]
    66                                  
    67 0000006E 7CD0                            JL my_loop
    68                                  
    69 00000070 A3[7D000000]                    MOV [max_value], EAX
    70                                          ;---------------------------------------
    71                                          
    72 00000075 EBC9                        JMP my_loop
    73                                  
    74                                      final:  
    75                                  
    76 00000077 FF35[7D000000]              push dword [max_value]
    77 0000007D 68[76000000]                push format
    78 00000082 FF15[00000000]              call [printf]
    79                                  
    80 00000088 6A00                    	push dword 0 
    81 0000008A FF15[00000000]          	call [exit] 
