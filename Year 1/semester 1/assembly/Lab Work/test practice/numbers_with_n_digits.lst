     1                                  bits 32
     2                                  global start
     3                                  
     4                                  ;read a number n and a file name, display all the 
     5                                  ;numbers having n digits who are even from the file with the specified name
     6                                  extern exit, printf, scanf, fread, fopen, fscanf
     7                                  
     8                                  import fopen msvcrt.dll
     9                                  import fread msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import exit msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fscanf msvcrt.dll
    14                                  
    15                                  segment data use32 class=data
    16 00000000 <res 00000064>              file_descriptor resb 100
    17 00000064 722B00                      acces_mode db "r+", 0
    18 00000067 456E74657220746865-         read_number_message db "Enter the number: ", 0
    18 00000070 206E756D6265723A20-
    18 00000079 00                 
    19 0000007A 546865206E756D6265-         numbers_message db "The numbers are: ", 0
    19 00000083 7273206172653A2000 
    20 0000008C <res 0000000A>              number resb 10
    21 00000096 <res 00000064>              file_name resb 100
    22 000000FA 25642000                    decimal_format db "%d ", 0
    23 000000FE 257300                      string_format db "%s", 0
    24 00000101 <res 000000C9>              buffer resb 201
    25 000001CA <res 0000000A>              nr resb 10
    26 000001D4 0000                        aux dw 0
    27                                  
    28                                  segment code use32 class=code
    29                                  read_number:
    30 00000000 68[67000000]                push dword read_number_message
    31 00000005 FF15[00000000]              call [printf]
    32 0000000B 83C404                      add esp, 4 * 1
    33                                  
    34 0000000E 68[8C000000]                push dword number
    35 00000013 68[FA000000]                push dword decimal_format
    36 00000018 FF15[00000000]              call [scanf]
    37 0000001E 83C408                      add esp, 4 * 2
    38                                  
    39 00000021 C3                          ret
    40                                  
    41                                  read_file_name:
    42 00000022 68[96000000]                push dword file_name
    43 00000027 68[FE000000]                push dword string_format
    44 0000002C FF15[00000000]              call [scanf]
    45 00000032 83C408                      add esp, 4 * 2
    46                                  
    47 00000035 C3                          ret
    48                                  
    49                                  open_file:
    50 00000036 68[64000000]                push dword acces_mode
    51 0000003B 68[96000000]                push dword file_name
    52 00000040 FF15[00000000]              call [fopen]
    53 00000046 83C408                      add esp, 4 * 2
    54                                  
    55 00000049 A3[00000000]                mov dword[file_descriptor], EAX
    56                                      
    57 0000004E C3                          ret
    58                                  
    59                                  read_integer:
    60 0000004F 68[CA010000]                push dword nr
    61 00000054 68[FA000000]                push dword decimal_format
    62 00000059 FF35[00000000]              push dword [file_descriptor]
    63                                      
    64 0000005F FF15[00000000]              call [fscanf]
    65 00000065 83C40C                      add esp, 4 * 3
    66                                  
    67 00000068 C3                          ret
    68                                  count_even_digits:
    69 00000069 8B442404                    mov EAX, [esp + 4];we have the number
    70 0000006D BA00000000                  mov EDX, 0;we make it on 64 bits for division
    71 00000072 B90A000000                  mov ECX, 10
    72 00000077 BB00000000                  mov EBX, 0
    73                                  
    74                                      my_loop1:
    75 0000007C 83F800                          cmp EAX, 0
    76 0000007F 7425                            je gata
    77 00000081 BA00000000                      mov EDX, 0
    78                                  
    79 00000086 F7F1                            DIV ECX;impartim la 10
    80                                          
    81 00000088 83FA00                          CMP EDX, 0
    82 0000008B 7416                            je add_even
    83 0000008D 83FA02                          CMP EDX, 2
    84 00000090 7411                            je add_even
    85 00000092 83FA04                          CMP EDX, 4
    86 00000095 740C                            je add_even
    87 00000097 83FA06                          CMP EDX, 6
    88 0000009A 7407                            je add_even
    89 0000009C 83FA08                          CMP EDX, 8
    90 0000009F 7402                            je add_even
    91                                  
    92 000000A1 EBD9                            jmp my_loop1
    93                                  
    94                                          add_even:
    95 000000A3 43                                  INC EBX
    96 000000A4 EBD6                        jmp my_loop1
    97                                      gata:
    98                                  
    99 000000A6 C3                          ret
   100                                  start:
   101 000000A7 E854FFFFFF                  call read_number
   102 000000AC E871FFFFFF                  call read_file_name
   103 000000B1 E880FFFFFF                  call open_file
   104                                      
   105 000000B6 68[7A000000]                push numbers_message
   106 000000BB FF15[00000000]              call [printf]
   107 000000C1 83C404                      add esp, 4
   108                                  
   109                                      my_loop:
   110 000000C4 E886FFFFFF                      call read_integer
   111 000000C9 83F8FF                          cmp EAX, -1
   112 000000CC 742B                            je final
   113                                  
   114 000000CE FF35[CA010000]                  push dword[nr]
   115 000000D4 E890FFFFFF                      call count_even_digits
   116                                  
   117 000000D9 3B1D[8C000000]                  cmp ebx, dword[number]
   118                                  
   119 000000DF 7402                            je display_number
   120                                  
   121 000000E1 EBE1                            jmp my_loop
   122                                  
   123                                          display_number:
   124                                  
   125 000000E3 FF35[CA010000]                  push dword[nr]
   126 000000E9 68[FA000000]                    push decimal_format
   127 000000EE FF15[00000000]                  call[printf]
   128 000000F4 83C408                          add esp, 4 * 2
   129                                         
   130 000000F7 EBCB                        jmp my_loop
   131                                      final:
   132                                  
   133 000000F9 6A00                    	push dword 0 
   134 000000FB FF15[00000000]          	call [exit] 
