     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we 
     8                                  import exit msvcrt.dll    
     9                                  
    10                                  ; c+(a*a-b+7)/(2+a), a-byte; b-doubleword; c-qword
    11                                  segment data use32 class=data
    12 00000000 0A                          a db 10
    13 00000001 39000000                    b dd 57
    14 00000005 1127000000000000            c dq 10001
    15                                  
    16                                  ; c+(a*a-b+7)/(2+a), a-byte; b-doubleword; c-qword - signed
    17                                  segment code use32 class=code
    18                                      start:
    19 00000000 A1[05000000]                    MOV EAX, dword[c]
    20 00000005 8B15[09000000]                  MOV EDX, dword[c + 4]
    21 0000000B 52                              PUSH EDX
    22 0000000C 50                              PUSH EAX;d is on the stack
    23                                          
    24 0000000D 66BA0000                        MOV DX, 0
    25 00000011 A0[00000000]                    MOV AL, [a]
    26 00000016 F6E0                            MUL AL;AX:a * a
    27                                          
    28 00000018 6652                            PUSH DX
    29 0000001A 6650                            PUSH AX
    30                                          
    31 0000001C 58                              POP EAX
    32                                          
    33 0000001D 2B05[01000000]                  SUB EAX, [b]
    34 00000023 83C007                          ADD EAX, 7;EAX = a * a - b + 7
    35                                          
    36 00000026 BB00000000                      MOV EBX, 0
    37 0000002B BA00000000                      MOV EDX, 0;EDX:ABX = a * a - b + 7
    38 00000030 8A1D[00000000]                  MOV BL, [a]
    39 00000036 80C302                          ADD BL, 2;EBX - a + 2
    40                                            
    41 00000039 F7F3                            DIV EBX;EAX = (a * a - b + 7) / (a + 2)
    42 0000003B BA00000000                      MOV EDX, 0
    43                                          
    44 00000040 5B                              POP EBX
    45 00000041 59                              POP ECX;ECX:EBX - c
    46                                          
    47 00000042 01D8                            ADD EAX, EBX
    48 00000044 11CA                            ADC EDX, ECX
    49                                          
    50                                          
    51                                          
    52                                          
    53 00000046 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 00000048 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
