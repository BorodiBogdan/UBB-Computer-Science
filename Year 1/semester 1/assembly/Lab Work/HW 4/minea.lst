     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ;Given the word A and the byte B, compute the doubleword C:
    12                                  ;the bits 0-3 of C have the value 1
    13                                  ;the bits 4-7 of C are the same as the bits 0-3 of A
    14                                  ;the bits 8-13 of C have the value 0
    15                                  ;the bits 14-23 of C are the same as the bits 4-13 of A
    16                                  ;the bits 24-29 of C are the same as the bits 2-7 of B
    17                                  ;the bits 30-31 have the value 1
    18                                  
    19                                  segment data use32 class=data
    20 00000000 FFFF                        a dw 0xFFFF
    21 00000002 FF                          b db 0xFF
    22 00000003 00000000                    c dd 0
    23                                      ;FF0FFFF
    24                                      ;11111111111111111100000011111111
    25                                      ;FFFFC0FF
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29 00000000 830D[03000000]0F                OR dword[c], 1111b;the bits 0-3 of C have the value 1
    30                                          
    31 00000007 B800000000                      MOV EAX, 0
    32 0000000C 66A1[00000000]                  MOV AX, word[a]
    33 00000012 83E00F                          AND EAX, 1111b
    34 00000015 C1C004                          ROL EAX, 4
    35 00000018 0905[03000000]                  OR dword[c], EAX;the bits 4-7 of C are the same as the bits 0-3 of A
    36                                          
    37 0000001E A1[03000000]                    MOV EAX, dword[c]
    38                                          
    39                                          ;the bits 8-13 of C have the value 0 ---->that s ok because c is initialised with 0
    40                                          
    41 00000023 B800000000                      MOV EAX, 0
    42 00000028 66A1[00000000]                  MOV AX, word[a]
    43 0000002E 25F03F0000                      AND EAX, 11111111110000b
    44 00000033 C1E00A                          SHL EAX, 10
    45 00000036 0905[03000000]                  OR dword[c], EAX;the bits 14-23 of C are the same as the bits 4-13 of A
    46                                          
    47 0000003C A1[03000000]                    MOV EAX, dword[c]
    48                                          
    49 00000041 B800000000                      MOV EAX, 0
    50 00000046 A0[02000000]                    MOV AL, byte[b]
    51 0000004B C0E802                          SHR AL, 2
    52 0000004E C1E018                          SHL EAX, 24
    53 00000051 0905[03000000]                  OR dword[c], EAX;the bits 24-29 of C are the same as the bits 2-7 of B
    54                                      
    55 00000057 A1[03000000]                    MOV EAX, dword[c]
    56                                          
    57 0000005C B800000000                      MOV EAX, 0
    58 00000061 B80B000000                      MOV EAX, 11
    59 00000066 C1E01E                          SHL EAX, 30
    60 00000069 0905[03000000]                  OR dword[c], EAX
    61                                          
    62 0000006F A1[03000000]                    MOV EAX, dword[c]
    63                                          ; exit(0)
    64 00000074 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000076 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
