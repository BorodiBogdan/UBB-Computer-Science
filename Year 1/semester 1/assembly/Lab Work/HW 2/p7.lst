     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 08                          a db 8
    14 00000001 06                          b db 6
    15 00000002 0A                          c db 10
    16 00000003 0F00                        d dw 15
    17                                  
    18                                  ; [(a-b)*5+d]-2*c  --> 30
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 66B80000                        MOV AX, 0
    23 00000004 A0[02000000]                    MOV AL, [c]
    24 00000009 66B90200                        MOV CX, 2
    25 0000000D 66F7E1                          MUL CX; AX -> c * 2
    26 00000010 6689C1                          MOV CX, AX
    27                                          
    28 00000013 A0[00000000]                    MOV AL, [a];a
    29 00000018 2A05[01000000]                  SUB AL, [b];a - b
    30 0000001E 66BB0500                        MOV BX, 5; 5
    31 00000022 66F7E3                          MUL BX;(a - b) * 5
    32 00000025 660305[03000000]                ADD AX, [d];(a - b) * 5 + d --> AX 
    33                                          
    34 0000002C 6629C8                          SUB AX, CX;[(a - b) * 5 + d] - 2 * c
    35                                    
    36                                          ; exit(0)
    37 0000002F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000031 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
