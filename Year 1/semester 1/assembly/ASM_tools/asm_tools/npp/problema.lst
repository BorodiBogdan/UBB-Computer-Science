     1                                  bits 32
     2                                   
     3                                  global start
     4                                   
     5                                  extern exit, fopen, fread, fclose, printf
     6                                  import exit msvcrt.dll
     7                                  import fopen msvcrt.dll
     8                                  import fread msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                   
    12                                      ; 
    13                                  segment data use32 class = data
    14 00000000 746573742E747874            filePath db "test.txt"
    15 00000008 72                          operation db "r"
    16 00000009 6165696F754145494F-         vowels db "aeiouAEIOU"
    16 00000012 55                 
    17 00000013 546865726520617265-         message db "There are %d vowels: "
    17 0000001C 20256420766F77656C-
    17 00000025 733A20             
    18                                      vowels_len equ $ - vowels
    19 00000028 <res 00000004>              file_descriptor resd 1
    20 0000002C <res 00000004>              character resb 4
    21 00000030 00                          result db 0
    22                                   
    23                                      ; 1). Se da un fisier text. Sa se citeasca continutul fisierului, sa se contorizeze numarul de vocale si sa se afiseze aceasta valoare. Numele fisierului text este definit in segmentul de date.
    24                                  segment code use32 class = code
    25                                      start:
    26 00000000 68[08000000]                    push dword operation
    27 00000005 68[00000000]                    push dword filePath
    28 0000000A FF15[00000000]                  call [fopen];we open test.txt
    29 00000010 A3[28000000]                    mov [file_descriptor], EAX; we move the file descriptor from EAX
    30                                          
    31 00000015 83C408                          add ESP, 2 * 4;we empty the stack
    32                                          ;now we need to read all characters one by one
    33                                          
    34                                          read_characters:
    35 00000018 FF35[28000000]                      push dword [file_descriptor]
    36 0000001E 6A01                                push 1
    37 00000020 6A01                                push 1
    38 00000022 68[2C000000]                        push dword character
    39 00000027 83C410                              add ESP, 4 * 4;we empty the stack
    40                                              ;now we should have the readen character in memory at label character
    41                                              
    42 0000002A 83F800                              CMP EAX, 0
    43 0000002D 7429                                JE final;the file is parsed or an error occured
    44                                              
    45 0000002F B91F000000                          MOV ECX, vowels_len;now we compare the character with all the vowels
    46 00000034 BE[09000000]                        MOV ESI, vowels
    47                                              
    48                                              verify_vowels:
    49 00000039 8A1E                                    mov BL, byte[esi]
    50 0000003B 381D[2C000000]                          cmp byte[character], BL;here we check if the character is a vowel
    51 00000041 7405                                    JZ is_vowel;It's a vowel!
    52                                                  
    53 00000043 46                                      INC ESI
    54 00000044 E2F3                                loop verify_vowels;we continue to read
    55                                              
    56 00000046 EBD0                                jmp read_characters
    57                                              
    58                                              is_vowel:
    59 00000048 8A1D[30000000]                         mov BL, [result]
    60 0000004E FEC3                                   INC BL
    61 00000050 881D[30000000]                         MOV [result], BL
    62                                                 
    63 00000056 EBC0                            jmp read_characters    
    64                                          final:
    65                                          
    66 00000058 FF35[30000000]                  push dword [result]
    67 0000005E 68[13000000]                    push dword message
    68 00000063 FF15[00000000]                  call [printf]                       ; print the message
    69 00000069 83C408                          add esp, 4 * 2
    70                                          
    71                                   
    72 0000006C 6A00                            push    dword 0
    73 0000006E FF15[00000000]                  call    [exit]
    74                                   
