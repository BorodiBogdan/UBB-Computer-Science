     1                                  bits 32
     2                                  global start
     3                                  
     4                                  extern exit, printf
     5                                  import exit msvcrt.dll
     6                                  import printf msvcrt.dll
     7                                  
     8                                  segment data use32 class=data
     9 00000000 78A634123456781228-         sir dd 1234A678h, 12785634h, 1A4D3C28h
     9 00000009 3C4D1A             
    10 0000000C 00                          finall db 0;when we are here the loop ends
    11 0000000D 0000<rept>                  word_string times 1000 dw 0
    12 000007DD 256400                      format db "%d", 0
    13                                  
    14                                  segment code use32 class=code
    15                                  start:
    16 00000000 BE[00000000]                mov ESI, sir
    17 00000005 BF[0D000000]                mov EDI, word_string
    18 0000000A BB00000000                  mov EBX, 0;we store in EBX the sum of 1's
    19                                  
    20                                      my_loop:
    21 0000000F AD                              lodsd;EAX double word from sir
    22                                          ;we will store the higher parth of the higher double word in byte[esi + 1]
    23                                          ;higher part of the lower part in byte[esi](AH)
    24                                          ;we do this because of little endian
    25                                  
    26 00000010 8827                            mov byte[edi], AH
    27                                  
    28                                          ;we shift the bits 16 positions because we want the higher part of the higher word on Ah(to be able to acces it)
    29 00000012 C1E810                          SHR EAX, 16
    30                                  
    31 00000015 886701                          mov byte[edi + 1], AH
    32                                  
    33 00000018 668B07                          MOV AX, word[EDI];we want to compute how many 1's
    34 0000001B B910000000                      mov ECX, 16
    35                                  
    36                                          While:
    37 00000020 66D1E8                              SHR AX, 1
    38 00000023 83D300                              ADC EBX, 0;if we have a one, then the carry flag is 1 also
    39 00000026 E2F8                            loop While
    40                                  
    41 00000028 83C702                          ADD EDI, 2
    42                                  
    43 0000002B 8A06                            mov AL, byte[ESI];we check if the loop is done
    44 0000002D 3C00                            cmp AL, 0
    45 0000002F 7402                            jz final
    46                                  
    47 00000031 EBDC                        jmp my_loop
    48                                      final:
    49                                  
    50 00000033 53                          push EBX
    51 00000034 68[DD070000]                push format
    52 00000039 FF15[00000000]              call[printf]
    53 0000003F 83C408                      add esp, 4 * 2
    54                                  
    55 00000042 6A00                    	push dword 0 
    56 00000044 FF15[00000000]          	call [exit] 
