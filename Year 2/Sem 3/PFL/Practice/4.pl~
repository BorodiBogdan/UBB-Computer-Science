add_even([],[]).

add_even([H|T], [H,1|R]):-
    H mod 2 =:= 0,
    add_even(T, R).

add_even([H|T], [H|R]):-
    H mod 2 =:= 1,
    add_even(T, R).

%Write a predicate to determine the difference of two sets

isElement([], _, false).
isElement([H|_], E, true) :-
    E = H.

isElement([H|T], E, R) :-
    E \= H,
    isElement(T, E, R).

count_app([], _, 0).
count_app([H|T], H, R):-
    count_app(T, H, R1),
    R is R1 + 1.
count_app([_|T], E, R):-
    count_app(T, E, R).

remove_element([], _, []).
remove_element([H|T], H, R) :-
    remove_element(T, H, R).
remove_element([H|T], E, [H|R]) :-
    remove_element(T, E, R).

remove_repetitive([], []).
remove_repetitive([H|T], R):-
    count_app(T, H, App),
    App > 0,
    remove_element([H|T], H, L2),
    remove_repetitive(L2, R).
remove_repetitive([H|T], [H|R]):-
    remove_repetitive(T, R).

find_minimum([H], H).
find_minimum([H,K|T], MIN):-
    H < K,
    find_minimum([H|T], MIN).

find_minimum([H,K|T], MIN):-
    H >= K,
    find_minimum([K|T], MIN).

remove_first_occ([H|T], H, T).
remove_first_occ([H|T], E, [H|R]):-
    remove_first_occ(T, E, R).

delete_first_minimum(L, R):-
    find_minimum(L, MIN),
    remove_first_occ(L, MIN, R).


insert_on_pos_helper([], _, _, Element, [Element]).
insert_on_pos_helper([H|T], CurrIndex, Index, Element, [Element, H|T]):-
    Index =:= CurrIndex.
insert_on_pos_helper([H|T], CurrIndex, Index, Element, [H|R]):-
    NewIndex is CurrIndex + 1,
    insert_on_pos_helper(T, NewIndex, Index, Element, R).
insert_on_pos(L, Index, Element, R):-
    insert_on_pos_helper(L, 1, Index, Element, R).


gcd(A, 0, A).
gcd(0, B, Bgcd(A, B, R):-
    B > 0,
    NEWA is A mod B,
    gcd(B, NEWA, R).

list_gcd([A], A).

list_gcd([H|T], R):-
    list_gcd(T, G),
    gcd(G, H, R).

set_union([], S2, S2).
set_union([H|T], S2, [H|R]):-
    \+ member(H, S2),
    set_union(T, S2, R).

set_union([H|T], S2, R):-
    member(H, S2),
    set_union(T, S2, R).

split([X], [X], []).
split([H1, H2| T], [H1 | L1], [H2 | L2]):-
    split(T, L1, L2).

merge([], L2, L2).
merge(L1, [], L1).
merge([H1|T1], [H2|T2], [H1|R]):-
    H1 < H2,
    merge(T1, [H2|T2], R).

merge([H1|T1], [H2|T2], [H2|R]):-
    H1 >= H2,
    merge([H1|T1], T2, R).

merge_sort([], []).
merge_sort([H],[H]).
merge_sort(L1, R):-
    split(L1, Left, Right),
    merge_sort(Left, R1),
    merge_sort(Right, R2),
    merge(R1, R2, R).



