; ======================================================================
; a) Function: twice_nth
; Purpose: Duplicate the n-th element in the given list.
; Inputs:
;   - lst: A linear list of elements (e.g., '(10 20 30 40 50)).
;   - n: The 1-based index of the element to duplicate (e.g., 3).
; Outputs:
;   - A new list with the n-th element duplicated in the same position.
; Flow Model:
;   twice_nth(lst, n) -> result
;     Input: lst = '(10 20 30 40 50), n = 3
;     Output: result = '(10 20 30 30 40 50)
; ======================================================================

(defun twice_nth (lst n)
  (cond 
    ((null lst) nil) ; Base Case: Empty list.
    ((= n 1) (cons (car lst) lst)) ; Duplicate the n-th element.
    (t (cons (car lst) (twice_nth (cdr lst) (- n 1)))))) ; Recurse with decremented n.

; Example usages
(print (twice_nth '(10 20 30 40 50) 3)) ; Output: (10 20 30 30 40 50)
(print (twice_nth '(A B C D) 2))        ; Output: (A B B C D)
(print (twice_nth '(X Y Z) 1))          ; Output: (X X Y Z)


; ======================================================================
; b) Function: assoc_list
; Purpose: Create an association list from two given lists.
; Inputs:
;   - lst1: The first list of keys (e.g., '(A B C)).
;   - lst2: The second list of values (e.g., '(X Y Z)).
; Outputs:
;   - An association list where each element is a pair (cons) of corresponding 
;     elements from lst1 and lst2.
; Flow Model:
;   assoc_list(lst1, lst2) -> result
;     Input: lst1 = '(A B C Q), lst2 = '(X Y Z U)
;     Output: result = '((A . X) (B . Y) (C . Z) (Q . U))
; ======================================================================

(defun assoc_list (lst1 lst2)
  (cond 
    ((and (null lst1) (null lst2)) nil) ; Base Case: Both lists are empty.
    ((null lst1) (list (cons nil (car lst2)))) ; lst1 is empty.
    ((null lst2) (list (cons (car lst1) nil))) ; lst2 is empty.
    (t (cons (cons (car lst1) (car lst2)) (assoc_list (cdr lst1) (cdr lst2)))))) ; Recursive pairing.

; Example usages
(print (assoc_list '(A B C Q) '(X Y Z U)))          ; Output: ((A . X) (B . Y) (C . Z) (Q . U))
(print (assoc_list '(1 2 3) '(one two three)))      ; Output: ((1 . one) (2 . two) (3 . three))
(print (assoc_list '(P Q) '(Alpha Beta Gamma)))     ; Output: ((P . Alpha) (Q . Beta))

;;; c) Function to count all sublists in a list, at any nesting level.
;;; Specification:
;;; - Function: cnt_sublists
;;; - Purpose: Counts all sublists, including the main list and any nested sublists.
;;; - Input Parameters:
;;;   1. l: A list which may contain nested sublists.
;;; - Output: An integer representing the number of sublists.
;;;
;;; Flow Model:
;;; 1. Check if the input is a list:
;;;    - If not, return 0 (base case).
;;; 2. Count the current list as 1.
;;; 3. Recursively process each element of the list:
;;;    - For every sublist found, recursively count its sublists.
;;; 4. Sum up the counts and return the total.

(defun cnt_sublists (l)
  (cond
    ((atom l) 0) ; If not a list, return 0.
    (t (+ 1 (apply '+ (mapcar 'cnt_sublists l)))))) ; Count this list and recurse.

(print (cnt_sublists '(1 2 (3 (4 5) (6 7)) 8 (9 10)))) ; Output: 5
(print (cnt_sublists '(1 2 3)))                        ; Output: 1
(print (cnt_sublists '((1 2) (3 (4 5)) 6)))            ; Output: 4

;;; d) Function to count the number of numerical atoms at the top level of a list.
;;; Specification:
;;; - Function: countNumbers
;;; - Purpose: Counts the number of numerical atoms in the given list at the superficial level.
;;; - Input Parameters:
;;;   1. l: A list that may contain numbers, non-numerical atoms, and sublists.
;;; - Output: An integer representing the count of numbers at the top level.
;;;
;;; Flow Model:
;;; 1. Traverse the list:
;;;    - If the list is empty, return 0 (base case).
;;;    - If the current element is a number, increment the count.
;;;    - If itâ€™s not a number, skip to the next element.
;;;    - Ignore sublists (do not recurse into them).
;;; 2. Continue recursively for the rest of the list.
;;; 3. Return the total count.

(defun countNumbers (l)
  (cond
    ((null l) 0) ; If the list is empty, return 0.
    ((numberp (car l)) (+ 1 (countNumbers (cdr l)))) ; If the first element is a number, count it.
    (t (countNumbers (cdr l))))) ; Otherwise, skip it.

(print (countNumbers '(1 2 s 5 (6) fg 5)))            ; Output: 4
(print (countNumbers '(a b c)))                       ; Output: 0
(print (countNumbers '(3 4.5 hello 7 (8 9))))         ; Output: 3

