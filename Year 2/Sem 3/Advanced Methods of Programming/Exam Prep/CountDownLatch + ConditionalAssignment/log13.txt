Id: 2
Execution stack: 
(Ref(int) v1; (Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
Ref(int) v1
(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
Ref(int) v1
(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))))
Symbol table: 
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))))
Symbol table: 
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(Ref(int) v2; (Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))))
Symbol table: 
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
Ref(int) v2
(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))
Symbol table: 
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
Ref(int) v2
(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))
Symbol table: 
v1 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))
Symbol table: 
v1 -> ref(0, int)
v2 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(Ref(int) v3; (int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))))
Symbol table: 
v1 -> ref(0, int)
v2 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
Ref(int) v3
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))
Symbol table: 
v1 -> ref(0, int)
v2 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
Ref(int) v3
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))
Symbol table: 
v1 -> ref(0, int)
v2 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))
Symbol table: 
v1 -> ref(0, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(int cnt; (new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))))
Symbol table: 
v1 -> ref(0, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
int cnt
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))
Symbol table: 
v1 -> ref(0, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
int cnt
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))
Symbol table: 
v1 -> ref(0, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))
Symbol table: 
cnt -> 0
v1 -> ref(0, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(new(v1, 2); (new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))))
Symbol table: 
cnt -> 0
v1 -> ref(0, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
new(v1, 2)
(new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))
Symbol table: 
cnt -> 0
v1 -> ref(0, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
new(v1, 2)
(new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))
Symbol table: 
cnt -> 0
v1 -> ref(0, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
1 -> 2
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(new(v2, 3); (new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
1 -> 2
Lock Table:

Latch Table:

Id: 2
Execution stack: 
new(v2, 3)
(new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
1 -> 2
Lock Table:

Latch Table:

Id: 2
Execution stack: 
new(v2, 3)
(new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(0, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
1 -> 2
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(new(v3, 4); (newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
Lock Table:

Latch Table:

Id: 2
Execution stack: 
new(v3, 4)
(newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
Lock Table:

Latch Table:

Id: 2
Execution stack: 
new(v3, 4)
(newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(0, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(newLatch(cnt, ReadHeap(v2)); (fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:

Id: 2
Execution stack: 
newLatch(cnt, ReadHeap(v2))
(fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:

Id: 2
Execution stack: 
newLatch(cnt, ReadHeap(v2))
(fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))
Symbol table: 
cnt -> 0
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:

Id: 2
Execution stack: 
(fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
(fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))); (fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt))))
(fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
fork((WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt))))
(fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
(fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
(fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))); (fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100))))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
(WriteHeap(v1, ReadHeap(v1) * 10); (print(ReadHeap(v1)); countDown(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt))))
(fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 10)
(print(ReadHeap(v1)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
fork((WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt))))
(fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
WriteHeap(v1, ReadHeap(v1) * 10)
(print(ReadHeap(v1)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 2
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
(fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
(print(ReadHeap(v1)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 4
Execution stack: 
(WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
(fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))); (await(cnt); (print(100); (countDown(cnt); print(100)))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
(print(ReadHeap(v1)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 4
Execution stack: 
(WriteHeap(v2, ReadHeap(v2) * 10); (print(ReadHeap(v2)); countDown(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt))))
(await(cnt); (print(100); (countDown(cnt); print(100))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
print(ReadHeap(v1))
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 4
Execution stack: 
WriteHeap(v2, ReadHeap(v2) * 10)
(print(ReadHeap(v2)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
fork((WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt))))
(await(cnt); (print(100); (countDown(cnt); print(100))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
print(ReadHeap(v1))
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 4
Execution stack: 
WriteHeap(v2, ReadHeap(v2) * 10)
(print(ReadHeap(v2)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
File table:
Heap memory:
1 -> 20
2 -> 3
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
(await(cnt); (print(100); (countDown(cnt); print(100))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 4
Execution stack: 
(print(ReadHeap(v2)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 5
Execution stack: 
(WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
(await(cnt); (print(100); (countDown(cnt); print(100))))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 3
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 4
Execution stack: 
(print(ReadHeap(v2)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 5
Execution stack: 
(WriteHeap(v3, ReadHeap(v3) * 10); (print(ReadHeap(v3)); countDown(cnt)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 3

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 2

Id: 3
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 2

Id: 4
Execution stack: 
print(ReadHeap(v2))
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 2

Id: 5
Execution stack: 
WriteHeap(v3, ReadHeap(v3) * 10)
(print(ReadHeap(v3)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 2

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 2

Id: 4
Execution stack: 
print(ReadHeap(v2))
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 2

Id: 5
Execution stack: 
WriteHeap(v3, ReadHeap(v3) * 10)
(print(ReadHeap(v3)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 4
Lock Table:

Latch Table:
1 -> 2

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 2

Id: 4
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 2

Id: 5
Execution stack: 
(print(ReadHeap(v3)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 2

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 2

Id: 4
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 2

Id: 5
Execution stack: 
(print(ReadHeap(v3)); countDown(cnt))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 2

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 4
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 5
Execution stack: 
print(ReadHeap(v3))
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 5
Execution stack: 
print(ReadHeap(v3))
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 5
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 5
Execution stack: 
countDown(cnt)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 1

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 5
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
await(cnt)
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
(print(100); (countDown(cnt); print(100)))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
print(100)
(countDown(cnt); print(100))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
print(100)
(countDown(cnt); print(100))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
(countDown(cnt); print(100))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
100
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
(countDown(cnt); print(100))
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
100
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
countDown(cnt)
print(100)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
100
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
countDown(cnt)
print(100)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
100
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
print(100)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
100
2
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
print(100)
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
100
2
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

Id: 2
Execution stack: 
Symbol table: 
cnt -> 1
v1 -> ref(1, int)
v2 -> ref(2, int)
v3 -> ref(3, int)
Output list: 
20
3
30
4
40
5
100
2
100
File table:
Heap memory:
1 -> 20
2 -> 30
3 -> 40
Lock Table:

Latch Table:
1 -> 0

