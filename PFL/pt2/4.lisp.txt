;a) Write a function to return the sum of two vectors.
;b) Write a function to get from a given list the list of all atoms, on any 
; level, but on the same order. Example:
; (((A B) C) (D E)) ==> (A B C D E)
;c) Write a function that, with a list given as parameter, inverts only continuous
; sequences of atoms. Example:
; (a b c (d (e f) g h i)) ==> (c b a (d (f e) i h g))
;d) Write a list to return the maximum value of the numerical atoms from a list, at superficial level


(defun addListElements(l1 l2)
  (cond
    ((and (null l1) (null l2)) 0)
    ((null l1) (+ (car l2) (addListElements l1 (cdr l2))))
    ((null l2) (+ (car l1) (addListElements (cdr l1) l2)))
    (t (+ (car l1) (car l2) (addListElements (cdr l1) (cdr l2))))
  )
)

(print (addListElements '(1 2 3 4 5) '(5 6 8 4 31 1 1 1 1)))

(defun get-atoms(l)
  (cond
    ((null l) nil)
    ((atom l) (list l))
    (t (append (get-atoms (car l)) (get-atoms (cdr l))))
  )
)

; c) Write a function that, with a list given as parameter, inverts only continuous
;  sequences of atoms. Example:
;  (a b c (d (e f) g h i)) ==> (c b a (d (f e) i h g))


(defun reverse_list(l)
(
    cond
        ((null l) nil)
        (T (append (reverse_list (cdr l)) (list (car l))))
))

(defun invert_list_helper(l aux)
(
    cond
        ((null l) (reverse_list aux))
        ((listp (car l)) (append (reverse_list aux) (list (invert_list_helper (car l) nil)) (invert_list_helper (cdr l) nil)))
        (T (invert_list_helper (cdr l) (append aux (list (car l)))))
))

(defun invert_list (l)
  (invert_list_helper l nil))
  
(print (invert_list '(a b c (d (e f) g h i))))

;d) Write a list to return the maximum value of the numerical atoms from a list, at superficial level

(defun maximum(a b)
  (cond
    ((and (numberp a) (numberp b) (> a b)) a)
    ((and (numberp a) (numberp b) (<= a b)) b)
    ((numberp b) b)
    ((numberp a) a)
    (t nil)
  )
)

(defun get_maximum(l)
  (cond
    ((null (cdr l)) (car l))
    (t (maximum (car l) (get_maximum(cdr l))))
  )
)

(print (get_maximum '(A 1 B 4 543 3 C F)))
